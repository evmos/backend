// Copyright Tharsis Labs Ltd.(Evmos)
// SPDX-License-Identifier:ENCL-1.0(https://github.com/evmos/backend/blob/main/LICENSE)
package api

import (
	"fmt"
	"log"
	"os"

	"github.com/tharsis/dashboard-backend/api/config"
	"github.com/tharsis/dashboard-backend/api/handler"

	"github.com/fasthttp/router"
	"github.com/valyala/fasthttp"
)

// Server represents the RPC server.
type Server struct {
	cfg     *config.Config
	handler *handler.Handler
	logger  *log.Logger
}

func NewServer(cfg *config.Config) Server {
	handler, err := handler.New()
	if err != nil {
		panic(err)
	}

	return Server{
		cfg:     cfg,
		handler: handler,
		// TODO logger should later be changed to one generated by config
		// and should be passed to the handler
		logger: log.New(os.Stdout, "INFO ", log.Ldate|log.Ltime|log.Lshortfile),
	}
}

func (s *Server) Start() error {
	s.logger.Printf("Starting server on port %v", s.cfg.Server.Port)

	addr := fmt.Sprintf("0.0.0.0:%d", s.cfg.Server.Port)
	router := s.newRouterWithRoutes()
	if err := fasthttp.ListenAndServe(addr, router.Handler); err != nil {
		s.logger.Printf("Error in fasthttp Server: %v\n", err)
		return err
	}
	return nil
}

func (s *Server) newRouterWithRoutes() *router.Router {
	r := router.New()
	s.handler.RegisterRoutes(r)
	return r
}
